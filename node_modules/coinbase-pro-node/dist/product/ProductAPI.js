"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var CandleGranularity;
(function (CandleGranularity) {
    CandleGranularity[CandleGranularity["ONE_MINUTE"] = 60] = "ONE_MINUTE";
    CandleGranularity[CandleGranularity["FIVE_MINUTES"] = 300] = "FIVE_MINUTES";
    CandleGranularity[CandleGranularity["FIFTEEN_MINUTES"] = 900] = "FIFTEEN_MINUTES";
    CandleGranularity[CandleGranularity["ONE_HOUR"] = 3600] = "ONE_HOUR";
    CandleGranularity[CandleGranularity["SIX_HOURS"] = 21600] = "SIX_HOURS";
    CandleGranularity[CandleGranularity["ONE_DAY"] = 86400] = "ONE_DAY";
})(CandleGranularity = exports.CandleGranularity || (exports.CandleGranularity = {}));
var OrderBookLevel;
(function (OrderBookLevel) {
    OrderBookLevel[OrderBookLevel["ONLY_BEST_BID_AND_ASK"] = 1] = "ONLY_BEST_BID_AND_ASK";
    OrderBookLevel[OrderBookLevel["TOP_50_BIDS_AND_ASKS"] = 2] = "TOP_50_BIDS_AND_ASKS";
    OrderBookLevel[OrderBookLevel["FULL_ORDER_BOOK"] = 3] = "FULL_ORDER_BOOK";
})(OrderBookLevel = exports.OrderBookLevel || (exports.OrderBookLevel = {}));
class ProductAPI {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    getCandles(productId, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProductAPI.URL.PRODUCTS}/${productId}/candles`;
            const response = yield this.apiClient.get(resource, { params });
            const candles = response.data.map(([time, low, high, open, close, volume]) => ({
                close,
                high,
                low,
                open,
                time,
                volume,
            }));
            return candles;
        });
    }
    getProducts() {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = ProductAPI.URL.PRODUCTS;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    getTrades(productId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProductAPI.URL.PRODUCTS}/${productId}/trades`;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    getProductOrderBook(productId, params = { level: OrderBookLevel.ONLY_BEST_BID_AND_ASK }) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProductAPI.URL.PRODUCTS}/${productId}/book`;
            let response;
            switch (params.level) {
                case OrderBookLevel.TOP_50_BIDS_AND_ASKS:
                    response = yield this.apiClient.get(resource, { params });
                    break;
                case OrderBookLevel.FULL_ORDER_BOOK:
                    response = yield this.apiClient.get(resource, { params });
                    break;
                default:
                    response = yield this.apiClient.get(resource, { params });
            }
            return response.data;
        });
    }
    getProductStats(productId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProductAPI.URL.PRODUCTS}/${productId}/stats`;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
    getProductTicker(productId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = `${ProductAPI.URL.PRODUCTS}/${productId}/ticker`;
            const response = yield this.apiClient.get(resource);
            return response.data;
        });
    }
}
exports.ProductAPI = ProductAPI;
ProductAPI.URL = {
    PRODUCTS: `/products`,
};
//# sourceMappingURL=ProductAPI.js.map